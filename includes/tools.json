{
    "tools": [
      {
        "openapi": "3.1.0",
        "info": {
          "title": "duckduckgo lite",
          "description": "a search engine. useful for when you need to answer questions about current events. input should be a search query.",
          "version": "v1.0.0"
        },
        "servers": [
          {
            "url": "https://lite.duckduckgo.com"
          }
        ],
        "paths": {
          "/lite/": {
            "post": {
              "operationId": "DuckDuckGoLiteSearch",
              "description": "a search engine. useful for when you need to answer questions about current events. input should be a search query.",
              "deprecated": false,
              "parameters": [
                {
                  "name": "q",
                  "in": "query",
                  "required": true,
                  "description": "keywords for query.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "s",
                  "in": "query",
                  "description": "can be `0`",
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "o",
                  "in": "query",
                  "description": "can be `json`",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "api",
                  "in": "query",
                  "description": "can be `d.js`",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "kl",
                  "in": "query",
                  "description": "wt-wt, us-en, uk-en, ru-ru, etc. Defaults to `wt-wt`.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "bing_market",
                  "in": "query",
                  "description": "wt-wt, us-en, uk-en, ru-ru, etc. Defaults to `wt-wt`.",
                  "schema": {
                    "type": "string"
                  }
                }
              ]
            }
          }
        },
        "components": {
          "schemas": {}
        }
      },
      {
        "openapi": "3.1.0",
        "info": {
          "title": "arxiv search",
          "description": "Run Arxiv search and get the article information.",
          "version": "v1.0.0"
        },
        "servers": [
          {
            "url": "https://export.arxiv.org"
          }
        ],
        "paths": {
          "/api/query": {
            "get": {
              "operationId": "ArxivSearch",
              "description": "Run Arxiv search and get the article information.",
              "deprecated": false,
              "parameters": [
                {
                  "name": "search_query",
                  "in": "query",
                  "required": true,
                  "description": "same as the search_query parameter rules of the arxiv API.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sortBy",
                  "in": "query",
                  "description": "can be `relevance`, `lastUpdatedDate`, `submittedDate`.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "sortOrder",
                  "in": "query",
                  "description": "can be either `ascending` or `descending`.",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "start",
                  "in": "query",
                  "description": "the index of the first returned result.",
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "max_results",
                  "in": "query",
                  "description": "the number of results returned by the query.",
                  "schema": {
                    "type": "number"
                  }
                }
              ]
            }
          }
        },
        "components": {
          "schemas": {}
        }
      },{
        "openapi": "3.1.0",
        "info": {
          "title": "CodeInterpreter",
          "description": "Run a given Python program and return the output.",
          "version": "1.0.0"
        },
        "servers": [
          {
            "url": "https://code.leez.tech"
          }
        ],
        "paths": {
          "/runcode": {
            "post": {
              "operationId": "CodeInterpreter",
              "x-openai-isConsequential": false,
              "summary": "Run a given Python program and return the output.",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["code", "languageType", "variables"],
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "The Python code to execute"
                        },
                        "languageType": {
                          "type": "string",
                          "description": "value is `python`"
                        },
                        "variables": {
                          "type": "object",
                          "description": "value is empty dict: `{}`"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },{
        "openapi": "3.1.0",
        "info": {
          "description": "A GPT that allows the user to read data from a link.",
          "title": "Chat PDF GPT",
          "version": "v1"
        },
        "servers": [
          {
            "url": "https://gpt.chatpdf.aidocmaker.com"
          }
        ],
        "paths": {
          "/read_url": {
            "post": {
              "description": "Allows for reading the contents of an URL link, including PDF/DOC/DOCX/PPT/CSV/XLS/XLSX/HTML content, Google Drive, Dropbox, OneDrive, aidocmaker.com docs. Always wrap image URLs from the response field `z1_image_urls` in Markdown, where each image has a ## DESCRIPTION.",
              "operationId": "ChatPDFReadRrl",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadDocV2Request"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {}
                    }
                  },
                  "description": "Successful Response"
                },
                "422": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                      }
                    }
                  },
                  "description": "Validation Error"
                }
              },
              "summary": "Read the contents of an URL link",
              "x-openai-isConsequential": false
            }
          }
        },
        "components": {
          "schemas": {
            "HTTPValidationError": {
              "properties": {
                "detail": {
                  "items": {
                    "$ref": "#/components/schemas/ValidationError"
                  },
                  "title": "Detail",
                  "type": "array"
                }
              },
              "title": "HTTPValidationError",
              "type": "object"
            },
            "ReadDocV2Request": {
              "properties": {
                "f1_http_url": {
                  "description": "User will pass a HTTPS or HTTP url to a file so that the file contents can be read.",
                  "title": "F1 Http Url",
                  "type": "string"
                },
                "f2_query": {
                  "default": "",
                  "description": "User will pass a query string to fetch relevant sections from the contents. It will be used for sentence-level similarity search on the document based on embeddings.",
                  "title": "F2 Query",
                  "type": "string"
                },
                "f3_selected_pages": {
                  "default": [],
                  "description": "Filter document on these page numbers. Use empty list to get all pages.",
                  "items": {
                    "type": "integer"
                  },
                  "title": "F3 Selected Pages",
                  "type": "array"
                }
              },
              "required": [
                "f1_http_url"
              ],
              "title": "ReadDocV2Request",
              "type": "object"
            },
            "ValidationError": {
              "properties": {
                "loc": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "title": "Location",
                  "type": "array"
                },
                "msg": {
                  "title": "Message",
                  "type": "string"
                },
                "type": {
                  "title": "Error Type",
                  "type": "string"
                }
              },
              "required": [
                "loc",
                "msg",
                "type"
              ],
              "title": "ValidationError",
              "type": "object"
            }
          }
        }
      }

    ]
  }
  